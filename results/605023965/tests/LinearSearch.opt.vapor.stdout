const empty_LS


func Main[in 0, out 2, local 2]
$t0 = HeapAllocZ(8)
local[0] = $t0
$t0 = local[0]
if $t0 goto :null1
Error("null pointer")
null1: 
$t0 = local[0]
out[0] = $t0
$t0 = 10
out[1] = $t0
$t1 = :LS.Start
call $t1
local[1] = $v0
$t1 = local[1]
PrintIntS($t1)
ret

func LS.Start[in 2, out 2, local 6]
$t0 = in[0]
out[0] = $t0
$t0 = in[1]
out[1] = $t0
$t1 = :LS.Init
call $t1
local[0] = $v0
$t0 = in[0]
out[0] = $t0
$t1 = :LS.Print
call $t1
local[1] = $v0
PrintIntS(9999)
$t0 = in[0]
out[0] = $t0
$t0 = 8
out[1] = $t0
$t1 = :LS.Search
call $t1
local[2] = $v0
$t1 = local[2]
PrintIntS($t1)
$t0 = in[0]
out[0] = $t0
$t0 = 12
out[1] = $t0
$t1 = :LS.Search
call $t1
local[3] = $v0
$t1 = local[3]
PrintIntS($t1)
$t0 = in[0]
out[0] = $t0
$t0 = 17
out[1] = $t0
$t1 = :LS.Search
call $t1
local[4] = $v0
$t1 = local[4]
PrintIntS($t1)
$t0 = in[0]
out[0] = $t0
$t0 = 50
out[1] = $t0
$t1 = :LS.Search
call $t1
local[5] = $v0
$t1 = local[5]
PrintIntS($t1)
$v0 = 55
ret

func LS.Print[in 1, out 0, local 6]
$t0 = 1
local[0] = $t0
while1_top: 
$t0 = in[0]
$t1 = [$t0+4]
local[1] = $t1
$t1 = local[0]
$t2 = local[1]
$t0 = LtS($t1 $t2)
local[2] = $t0
$t0 = local[2]
if0 $t0 goto :while1_end
$t0 = in[0]
$t1 = [$t0]
local[3] = $t1
$t0 = local[3]
if $t0 goto :null2
Error("null pointer")
null2: 
$t0 = local[3]
$t1 = [$t0]
local[4] = $t1
$t1 = local[0]
$t2 = local[4]
$t0 = Lt($t1 $t2)
local[4] = $t0
$t0 = local[4]
if $t0 goto :bounds1
Error("array index out of bounds")
bounds1: 
$t1 = local[0]
$t0 = MulS($t1 4)
local[4] = $t0
$t1 = local[4]
$t2 = local[3]
$t0 = Add($t1 $t2)
local[4] = $t0
$t0 = local[4]
$t1 = [$t0+4]
local[5] = $t1
$t1 = local[5]
PrintIntS($t1)
$t1 = local[0]
$t0 = Add($t1 1)
local[0] = $t0
goto :while1_top
while1_end: 
$v0 = 0
ret

func LS.Search[in 2, out 0, local 12]
$t0 = 1
local[0] = $t0
$t0 = 0
local[1] = $t0
$t0 = 0
local[2] = $t0
while2_top: 
$t0 = in[0]
$t1 = [$t0+4]
local[3] = $t1
$t1 = local[0]
$t2 = local[3]
$t0 = LtS($t1 $t2)
local[4] = $t0
$t0 = local[4]
if0 $t0 goto :while2_end
$t0 = in[0]
$t1 = [$t0]
local[5] = $t1
$t0 = local[5]
if $t0 goto :null3
Error("null pointer")
null3: 
$t0 = local[5]
$t1 = [$t0]
local[6] = $t1
$t1 = local[0]
$t2 = local[6]
$t0 = Lt($t1 $t2)
local[6] = $t0
$t0 = local[6]
if $t0 goto :bounds2
Error("array index out of bounds")
bounds2: 
$t1 = local[0]
$t0 = MulS($t1 4)
local[6] = $t0
$t1 = local[6]
$t2 = local[5]
$t0 = Add($t1 $t2)
local[6] = $t0
$t0 = local[6]
$t1 = [$t0+4]
local[7] = $t1
$t1 = in[1]
$t0 = Add($t1 1)
local[8] = $t0
$t1 = local[7]
$t2 = in[1]
$t0 = LtS($t1 $t2)
local[9] = $t0
$t0 = local[9]
if0 $t0 goto :if1_else
$t0 = 0
local[10] = $t0
goto :if1_end
if1_else: 
$t1 = local[7]
$t2 = local[8]
$t0 = LtS($t1 $t2)
local[11] = $t0
$t0 = local[11]
if $t0 goto :if2_else
$t0 = 0
local[10] = $t0
goto :if2_end
if2_else: 
$t0 = 1
local[1] = $t0
$t0 = 1
local[2] = $t0
$t0 = in[0]
$t1 = [$t0+4]
local[0] = $t1
if2_end: 
if1_end: 
$t1 = local[0]
$t0 = Add($t1 1)
local[0] = $t0
goto :while2_top
while2_end: 
$v0 = local[2]
ret

func LS.Init[in 2, out 1, local 11]
$t0 = in[0]
$t1 = in[1]
[$t0+4] = $t1
$t0 = in[1]
out[0] = $t0
$t1 = :AllocArray
call $t1
local[0] = $v0
$t0 = in[0]
$t1 = local[0]
[$t0] = $t1
$t0 = 1
local[1] = $t0
$t0 = in[0]
$t1 = [$t0+4]
local[2] = $t1
$t1 = local[2]
$t0 = Add($t1 1)
local[3] = $t0
while3_top: 
$t0 = in[0]
$t1 = [$t0+4]
local[4] = $t1
$t1 = local[1]
$t2 = local[4]
$t0 = LtS($t1 $t2)
local[5] = $t0
$t0 = local[5]
if0 $t0 goto :while3_end
$t1 = local[1]
$t0 = MulS(2 $t1)
local[6] = $t0
$t1 = local[3]
$t0 = Sub($t1 3)
local[7] = $t0
$t0 = in[0]
$t1 = [$t0]
local[8] = $t1
$t0 = local[8]
if $t0 goto :null4
Error("null pointer")
null4: 
$t0 = local[8]
$t1 = [$t0]
local[9] = $t1
$t1 = local[1]
$t2 = local[9]
$t0 = Lt($t1 $t2)
local[9] = $t0
$t0 = local[9]
if $t0 goto :bounds3
Error("array index out of bounds")
bounds3: 
$t1 = local[1]
$t0 = MulS($t1 4)
local[9] = $t0
$t1 = local[9]
$t2 = local[8]
$t0 = Add($t1 $t2)
local[9] = $t0
$t1 = local[6]
$t2 = local[7]
$t0 = Add($t1 $t2)
local[10] = $t0
$t0 = local[9]
$t1 = local[10]
[$t0+4] = $t1
$t1 = local[1]
$t0 = Add($t1 1)
local[1] = $t0
$t1 = local[3]
$t0 = Sub($t1 1)
local[3] = $t0
goto :while3_top
while3_end: 
$v0 = 0
ret

func AllocArray[in 1, out 0, local 2]
$t1 = in[0]
$t0 = MulS($t1 4)
local[0] = $t0
$t1 = local[0]
$t0 = Add($t1 4)
local[0] = $t0
$t1 = local[0]
$t0 = HeapAllocZ($t1)
local[1] = $t0
$t0 = local[1]
$t1 = in[0]
[$t0] = $t1
$v0 = local[1]
ret
